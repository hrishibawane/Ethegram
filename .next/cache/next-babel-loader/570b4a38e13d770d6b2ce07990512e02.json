{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Form, Button, Input, Image, Message } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport social from \"../../ethereum/social\";\nimport web3 from \"../../ethereum/web3\";\nimport ipfs from \"../../ethereum/ipfs\";\nimport { Router } from \"../../routes\";\n\nvar swearjar = require(\"swearjar\");\n\nimport COLORS from \"../../colors\";\n\nclass NewPost extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      caption: \"\",\n      description: \"\",\n      imgBuffer: null,\n      imgIpfsHash: \"\",\n      selectedImage: \"\",\n      loading: false,\n      errMessage: \"\",\n      err: false\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      const {\n        description,\n        caption\n      } = this.state;\n      this.setState({\n        loading: true,\n        errMessage: \"\"\n      });\n\n      try {\n        const accs = await web3.eth.getAccounts();\n        const date = new Date();\n        date.setHours(date.getHours() + 5);\n        date.setMinutes(date.getMinutes() + 30);\n        const timestamp = date.toUTCString().replace(\"GMT\", \"IST\");\n        console.log(this.state.imgBuffer);\n\n        if (this.state.imgBuffer != null) {\n          const ipfsHash = await ipfs.add(this.state.imgBuffer);\n          this.setState({\n            imgIpfsHash: ipfsHash[0].hash\n          });\n        }\n\n        const th = await social.methods.createPost(caption, description, this.state.imgIpfsHash, timestamp).send({\n          from: accs[0],\n          value: web3.utils.toWei(\"0.01\", \"ether\")\n        });\n        console.log(th.transactionHash);\n        Router.pushRoute(\"/\");\n      } catch (err) {\n        this.setState({\n          err: true,\n          errMessage: err.message\n        });\n      }\n\n      this.setState({\n        loading: false\n      });\n    });\n\n    _defineProperty(this, \"captureFile\", event => {\n      event.stopPropagation();\n      event.preventDefault();\n      this.setState({\n        selectedImage: URL.createObjectURL(event.target.files[0])\n      });\n      const file = event.target.files[0];\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => this.convertToBuffer(reader);\n    });\n\n    _defineProperty(this, \"convertToBuffer\", async reader => {\n      const buffer = await Buffer.from(reader.result);\n      this.setState({\n        imgBuffer: buffer\n      });\n    });\n  }\n\n  render() {\n    return __jsx(Layout, null, __jsx(\"h3\", null, \"Create New Post\"), __jsx(\"hr\", null), __jsx(\"br\", null), __jsx(Form, {\n      onSubmit: this.onSubmit\n    }, __jsx(Form.Input, {\n      fluid: true,\n      label: \"Caption\",\n      value: this.state.caption,\n      onChange: event => this.setState({\n        caption: event.target.value\n      })\n    }), __jsx(Form.Input, {\n      label: \"Upload an Image\",\n      type: \"file\",\n      onChange: event => this.captureFile(event)\n    }), __jsx(Image, {\n      src: this.state.selectedImage,\n      size: \"medium\"\n    }), __jsx(\"br\", null), __jsx(Form.TextArea, {\n      label: \"Post Description\",\n      value: this.state.description,\n      placeholder: \"Whats Happening...\",\n      onChange: event => this.setState({\n        description: event.target.value\n      })\n    }), __jsx(Message, {\n      error: true,\n      header: \"Oops!\",\n      visible: this.state.err,\n      content: this.state.errMessage\n    }), __jsx(Button, {\n      icon: \"edit\",\n      content: \"Create Post\",\n      loading: this.state.loading,\n      style: {\n        backgroundColor: COLORS.menuBackground,\n        color: COLORS.menuText\n      }\n    })));\n  }\n\n}\n\nexport default NewPost;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Form, Input, Button } from 'semantic-ui-react';\nimport web3 from '../ethereum/web3';\nimport ipfs from '../ethereum/ipfs';\nimport social from '../ethereum/social';\nimport Layout from '../components/Layout';\n\nvar textEncoding = require('text-encoding');\n\nvar TestIpfs = /*#__PURE__*/function (_Component) {\n  _inherits(TestIpfs, _Component);\n\n  function TestIpfs() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TestIpfs);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TestIpfs)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      ipfsHash: null,\n      buffer: '',\n      ethAddress: '',\n      data: null,\n      pic: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"captureFile\", function (event) {\n      event.stopPropagation();\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        return _this.convertToBuffer(reader);\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"convertToBuffer\", function _callee(reader) {\n      var buffer;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Buffer.from(reader.result));\n\n            case 2:\n              buffer = _context.sent;\n\n              _this.setState({\n                buffer: buffer\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function _callee2(event) {\n      var accs, ethAddress, ipfsHash;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              event.preventDefault();\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(web3.eth.getAccounts());\n\n            case 3:\n              accs = _context2.sent;\n              console.log('Sending from metamask account: ' + accs[0]); // obtain contract address from social.js\n\n              _context2.next = 7;\n              return _regeneratorRuntime.awrap(social.options.address);\n\n            case 7:\n              ethAddress = _context2.sent;\n\n              _this.setState({\n                ethAddress: ethAddress\n              });\n\n              _context2.next = 11;\n              return _regeneratorRuntime.awrap(ipfs.add(_this.state.buffer));\n\n            case 11:\n              ipfsHash = _context2.sent;\n\n              _this.setState({\n                ipfsHash: ipfsHash[0].hash\n              });\n\n              console.log(_this.state.ipfsHash); //save doc to ipfs, return its hash\n              // await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n              //     console.log(err, ipfsHash);\n              //     this.setState({ ipfsHash: ipfsHash[0].hash });\n              // });\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getFile\", function _callee3(event) {\n      var data, content, pic;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              event.preventDefault();\n              _context3.next = 3;\n              return _regeneratorRuntime.awrap(ipfs.files.get(_this.state.ipfsHash));\n\n            case 3:\n              data = _context3.sent;\n              content = data[0].content; // this.largeuint8ArrToString(content, (text) => {\n              //     console.log(text);\n              //     this.setState({ pic: \"data:image/png;base64\" + text });\n              // });\n\n              pic = _this.uint8ToBase64(content); // const TextDecoder = textEncoding.TextDecoder;\n              // let pic = new TextDecoder(\"utf-8\").decode(content);\n\n              _this.setState({\n                data: data,\n                pic: \"data:image/png;base64,\" + pic\n              });\n\n              console.log(\"Retrieved Data: \", _this.state.pic);\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    return _this;\n  }\n\n  _createClass(TestIpfs, [{\n    key: \"largeuint8ArrToString\",\n    value: function largeuint8ArrToString(uint8arr, callback) {\n      var bb = new Blob([uint8arr]);\n      var f = new FileReader();\n\n      f.onload = function (e) {\n        callback(e.target.result);\n      };\n\n      f.readAsText(bb);\n    }\n  }, {\n    key: \"uint8ToBase64\",\n    value: function uint8ToBase64(buffer) {\n      var binary = '';\n      var bytes = [].slice.call(new Uint8Array(buffer));\n      bytes.forEach(function (b) {\n        return binary += String.fromCharCode(b);\n      });\n      return window.btoa(binary);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, null, __jsx(\"h2\", null, \"Test IPFS\"), __jsx(Form, {\n        onSubmit: this.onSubmit\n      }, __jsx(Input, {\n        type: \"file\",\n        onChange: this.captureFile\n      }), __jsx(Button, {\n        primary: true\n      }, \"Send\")), __jsx(\"br\", null), __jsx(Button, {\n        onClick: this.getFile,\n        secondary: true\n      }, \"GetFile\"), __jsx(\"img\", {\n        src: this.state.pic\n      }));\n    }\n  }]);\n\n  return TestIpfs;\n}(Component);\n\nexport default TestIpfs;","map":null,"metadata":{},"sourceType":"module"}
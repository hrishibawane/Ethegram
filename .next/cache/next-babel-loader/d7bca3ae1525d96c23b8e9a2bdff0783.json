{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport { Form, Button, Input, Image, Message, Grid, Container } from \"semantic-ui-react\";\nimport Layout from \"../../components/Layout\";\nimport social from \"../../ethereum/social\";\nimport web3 from \"../../ethereum/web3\";\nimport ipfs from \"../../ethereum/ipfs\";\nimport { Router } from \"../../routes\";\nimport CountUp from \"react-countup\";\nimport COLORS from \"../../colors\";\n\nclass Profile extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      tokens: 0,\n      username: \"\",\n      useraddress: \"\",\n      userposts: 0,\n      userbalance: 0.0,\n      redeemtokens: 0,\n      inputRedeem: 0,\n      err: false,\n      errMessage: \"\"\n    });\n\n    _defineProperty(this, \"redeemTokens\", async () => {\n      const {\n        inputRedeem,\n        useraddress,\n        redeemtokens\n      } = this.state;\n\n      if (inputRedeem == 0 || inputRedeem > redeemtokens) {\n        this.setState({\n          err: true,\n          errMessage: \"You do no have enough Redeemable Tokens\"\n        });\n      } else {\n        try {\n          let value = inputRedeem * 0.001;\n          value = value.toString();\n          value = web3.utils.toWei(value, \"ether\");\n          await social.methods.redeemNTokens(inputRedeem, value).send({\n            from: useraddress\n          });\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    });\n  }\n\n  async componentDidMount() {\n    const accs = await web3.eth.getAccounts();\n    const userDetails = await social.methods.getUserDetails(accs[0]).call();\n    const userAddress = accs[0];\n    let userBalance = await web3.eth.getBalance(accs[0]);\n    userBalance = web3.utils.fromWei(userBalance, \"ether\");\n    userBalance = parseFloat(userBalance).toFixed(4);\n    console.log(userBalance);\n    this.setState({\n      username: userDetails[0],\n      tokens: userDetails[1],\n      useraddress: userAddress,\n      userposts: userDetails[2],\n      redeemtokens: userDetails[3],\n      userbalance: userBalance\n    });\n  }\n\n  render() {\n    return __jsx(Layout, null, __jsx(Container, null, __jsx(\"br\", null), __jsx(\"center\", null, __jsx(\"h1\", {\n      style: {\n        color: COLORS.menuBackground,\n        fontSize: \"50px\"\n      }\n    }, this.state.username), __jsx(\"div\", {\n      style: {\n        backgroundColor: COLORS.divBackground,\n        padding: \"10px\",\n        width: \"500px\",\n        borderRadius: \"20px\",\n        border: \"1px solid\",\n        borderColor: COLORS.menuBackground\n      }\n    }, __jsx(\"p\", {\n      style: {\n        color: COLORS.menuBackground,\n        fontWeight: \"bold\",\n        fontSize: \"15px\"\n      }\n    }, this.state.useraddress))), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"hr\", null), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(Grid, {\n      centered: true\n    }, __jsx(Grid.Row, null, __jsx(Grid.Column, {\n      width: \"8\"\n    }, __jsx(\"div\", {\n      style: {\n        padding: \"20px\",\n        height: \"100%\",\n        borderRadius: \"50px\",\n        backgroundColor: COLORS.menuBackground,\n        color: COLORS.menuText,\n        border: \"2px solid\",\n        borderColor: COLORS.divBackground\n      }\n    }, __jsx(\"center\", null, __jsx(\"h1\", {\n      style: {\n        fontSize: \"40px\"\n      }\n    }, \"Total Posts\"), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(CountUp, {\n      style: {\n        fontSize: \"80px\",\n        alignContent: \"center\",\n        justifyContent: \"center\"\n      },\n      start: 0,\n      end: this.state.userposts,\n      duration: 5\n    })))), __jsx(Grid.Column, {\n      width: \"8\"\n    }, __jsx(\"div\", {\n      style: {\n        padding: \"20px\",\n        height: \"100%\",\n        borderRadius: \"50px\",\n        backgroundColor: COLORS.divBackground,\n        color: COLORS.menuBackground,\n        border: \"2px solid\",\n        borderColor: COLORS.menuBackground\n      }\n    }, __jsx(\"center\", null, __jsx(\"h1\", {\n      style: {\n        fontSize: \"40px\"\n      }\n    }, \"Total Tokens Earned\"), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(CountUp, {\n      style: {\n        fontSize: \"80px\",\n        alignContent: \"center\",\n        justifyContent: \"center\"\n      },\n      start: 0,\n      end: this.state.tokens,\n      duration: 5\n    }), __jsx(\"h1\", null, \"GTok\"))))), __jsx(Grid.Row, null, __jsx(Grid.Column, {\n      width: \"8\"\n    }, __jsx(\"div\", {\n      style: {\n        padding: \"20px\",\n        height: \"100%\",\n        borderRadius: \"50px\",\n        backgroundColor: COLORS.divBackground,\n        color: COLORS.menuBackground,\n        border: \"2px solid\",\n        borderColor: COLORS.menuBackground\n      }\n    }, __jsx(\"center\", null, __jsx(\"h1\", {\n      style: {\n        fontSize: \"40px\"\n      }\n    }, \"Redeemable Tokens\"), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(CountUp, {\n      style: {\n        fontSize: \"80px\",\n        alignContent: \"center\",\n        justifyContent: \"center\",\n        margin: \"10px\"\n      },\n      start: 0.0,\n      end: this.state.redeemtokens,\n      duration: 5\n    }), __jsx(\"h1\", null, \"GTok\")))), __jsx(Grid.Column, {\n      width: \"8\"\n    }, __jsx(\"div\", {\n      style: {\n        padding: \"20px\",\n        height: \"100%\",\n        borderRadius: \"50px\",\n        backgroundColor: COLORS.menuBackground,\n        color: COLORS.menuText,\n        border: \"2px solid\",\n        borderColor: COLORS.divBackground\n      }\n    }, __jsx(\"center\", null, __jsx(\"h1\", {\n      style: {\n        fontSize: \"40px\"\n      }\n    }, \"Account Balance\"), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(CountUp, {\n      style: {\n        fontSize: \"80px\",\n        alignContent: \"center\",\n        justifyContent: \"center\",\n        margin: \"10px\"\n      },\n      start: 0.0,\n      end: this.state.userbalance,\n      decimals: 4,\n      duration: 5\n    }), __jsx(\"h1\", null, \"ETH\")))))), __jsx(\"br\", null), __jsx(\"br\", null), __jsx(\"hr\", null), __jsx(\"br\", null), __jsx(\"h1\", {\n      style: {\n        color: COLORS.menuBackground\n      }\n    }, \"Redeem Tokens\"), __jsx(\"p\", {\n      style: {\n        color: COLORS.menuBackground,\n        fontSize: \"15px\"\n      }\n    }, \"(Note: Tokens can be redeemed if tokens are greater than 20)\"), __jsx(Form, null, __jsx(Form.Field, {\n      inline: true,\n      style: {\n        height: \"50px\"\n      }\n    }, __jsx(\"label\", {\n      style: {\n        color: COLORS.menuBackground,\n        fontSize: \"18px\"\n      }\n    }, \"Tokens to redeem:\", \" \"), __jsx(Input, {\n      required: true,\n      focus: true,\n      placeholder: \"No. of Tokens\",\n      style: {\n        fontSize: \"18px\"\n      },\n      onChange: event => this.setState({\n        inputRedeem: event.target.value\n      })\n    }), __jsx(Button, {\n      icon: \"money\",\n      content: \"Redeem\",\n      style: {\n        height: \"45px\",\n        fontSize: \"16px\",\n        color: COLORS.menuText,\n        backgroundColor: COLORS.menuBackground\n      },\n      onClick: () => this.redeemTokens()\n    })), __jsx(Message, {\n      error: true,\n      header: \"Insufficient Tokens!\",\n      visible: this.state.err,\n      content: this.state.errMessage\n    })), __jsx(\"br\", null), __jsx(\"br\", null)));\n  }\n\n} // tokens earned and withdrawable tokens\n// 37.4642\n\n\nexport default Profile;","map":null,"metadata":{},"sourceType":"module"}
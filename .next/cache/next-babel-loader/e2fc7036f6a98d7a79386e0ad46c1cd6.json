{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/hrishib/Desktop/Ethegram/pages/users/view/index.js\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport Layout from \"../../../components/Layout\";\nimport social from \"../../../ethereum/social\";\nimport { Container, Grid, Card, Form, Input, Button, Modal, Header, List } from \"semantic-ui-react\";\nimport COLORS from \"../../../colors\";\nimport CountUp from \"react-countup\";\nimport ReactPlayer from \"react-player\";\n\nvar ViewUser = /*#__PURE__*/function (_Component) {\n  _inherits(ViewUser, _Component);\n\n  function ViewUser() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ViewUser);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ViewUser)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      userAddress: \"\",\n      userName: \"\",\n      tokens: 0,\n      userPosts: 0,\n      redeemTokens: 0,\n      items: [],\n      posts: [],\n      postCount: 0\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderPosts\", function _callee() {\n      var posts;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              posts = _this.state.posts;\n              console.log(_this.state.postCount); // const items = await Promise.all(\n              //   posts.map(async (post, index) => {\n              //     if (!post.valid || post.owner != this.state.userAddress) {\n              //       return {\n              //         key: index,\n              //       };\n              //     }\n              //     const name = this.state.userName;\n              //     let imgSrc = null, vidSrc = null;\n              //     if (post.imgIpfsHash.length > 0) {\n              //       let hash = post.imgIpfsHash;\n              //       let type = hash[0];\n              //       hash = hash.slice(1, hash.length);\n              //       if (type == \"0\") {\n              //         imgSrc = \"https://ipfs.io/ipfs/\" + hash;\n              //       } else {\n              //         vidSrc = \"https://ipfs.io/ipfs/\" + hash;\n              //       }\n              //     }\n              //     console.log(post.imgIpfsHash);\n              //     return {\n              //       key: index,\n              //       header: (\n              //         <div>\n              //           <h4 style={{ marginBottom: \"0px\" }}>{name}</h4>\n              //           <p style={{ color: \"grey\", marginTop: \"0px\" }}>\n              //             {post.timestamp}\n              //           </p>\n              //           <h3>{post.caption}</h3>\n              //         </div>\n              //       ),\n              //       description: (\n              //         <div style={{ border: \"2px solid grey\" }}>\n              //           <p style={{ margin: \"10px\", fontSize: \"15px\" }}>\n              //             {post.description}\n              //           </p>\n              //           <Image\n              //             style={{ padding: \"20px\" }}\n              //             hidden={imgSrc == null}\n              //             src={imgSrc}\n              //             fluid\n              //           />\n              //           <ReactPlayer\n              //             style={{ padding: \"20px\", minHeight: \"100%\" }}\n              //             hidden={vidSrc == null}\n              //             url={vidSrc}\n              //             controls={true}\n              //             light=\"https://www.thejobconnection.org/wp-content/uploads/2019/05/Video-Arrow-overlay.png\"\n              //             width=\"100%\"\n              //             height=\"100%\"\n              //           />\n              //         </div>\n              //       ),\n              //       extra: (\n              //         <div>\n              //           <Form onSubmit={() => this.onSubmit(index)}>\n              //             <Form.Field inline>\n              //               <Input\n              //                 required\n              //                 focus\n              //                 placeholder=\"Add a comment...\"\n              //                 value={this.state.caption}\n              //                 onChange={(event) =>\n              //                   this.setState({ newComment: event.target.value })\n              //                 }\n              //                 style={{ width: \"70%\", height: \"40px\", marginRight: \"0px\" }}\n              //               />\n              //               <Button\n              //                 size=\"small\"\n              //                 color=\"linkedin\"\n              //                 content=\"Post Comment\"\n              //                 icon=\"edit\"\n              //                 style={{ height: \"40px\" }}\n              //               />\n              //             </Form.Field>\n              //           </Form>\n              //           <br></br>\n              //           <Button\n              //             onClick={() => this.likePost(index)}\n              //             color=\"red\"\n              //             content=\"Like\"\n              //             icon=\"heart\"\n              //             size=\"medium\"\n              //             label={{ basic: true, color: \"red\", content: post.likes }}\n              //           />\n              //           <Modal\n              //             trigger={\n              //               <Button\n              //                 size=\"medium\"\n              //                 color=\"facebook\"\n              //                 content=\"View Comments\"\n              //                 icon=\"comments\"\n              //                 onClick={() => this.setState({ modal: true })}\n              //               />\n              //             }\n              //             size=\"small\"\n              //           >\n              //             <Header content=\"Comments\" />\n              //             <Modal.Content>\n              //               <List divided items={post.comments.split(\"/\")}></List>\n              //             </Modal.Content>\n              //             <Modal.Actions>\n              //               <Button\n              //                 color=\"red\"\n              //                 content=\"Close\"\n              //                 icon=\"close\"\n              //                 inverted\n              //                 onClick={() => this.setState({ modal: false })}\n              //               />\n              //             </Modal.Actions>\n              //           </Modal>\n              //         </div>\n              //       ),\n              //       fluid: true,\n              //     };\n              //   })\n              // );\n              // this.setState({ items: items });\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n\n    return _this;\n  }\n\n  _createClass(ViewUser, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var userAddress, userDetails, postCount, posts;\n      return _regeneratorRuntime.async(function componentDidMount$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              userAddress = this.props.userAddress;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(social.methods.getUserDetails(userAddress).call());\n\n            case 3:\n              userDetails = _context2.sent;\n              console.log(userDetails);\n              this.setState({\n                userName: userDetails[0],\n                tokens: userDetails[1],\n                userPosts: userDetails[2],\n                redeemTokens: userDetails[3],\n                userAddress: userAddress\n              });\n              _context2.next = 8;\n              return _regeneratorRuntime.awrap(social.methods.getPostsCount().call());\n\n            case 8:\n              postCount = _context2.sent;\n              _context2.next = 11;\n              return _regeneratorRuntime.awrap(Promise.all(Array(parseInt(postCount)).fill().map(function (element, index) {\n                return social.methods.posts(index).call();\n              })));\n\n            case 11:\n              posts = _context2.sent;\n              console.log(posts);\n              this.setState({\n                posts: posts,\n                postCount: postCount\n              });\n              this.renderPosts();\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Layout, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, __jsx(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }), __jsx(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, __jsx(\"h1\", {\n        style: {\n          color: COLORS.menuBackground,\n          fontSize: \"50px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, this.state.userName), __jsx(\"div\", {\n        style: {\n          backgroundColor: COLORS.divBackground,\n          padding: \"10px\",\n          width: \"500px\",\n          borderRadius: \"20px\",\n          border: \"1px solid\",\n          borderColor: COLORS.menuBackground\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, __jsx(\"p\", {\n        style: {\n          color: COLORS.menuBackground,\n          fontWeight: \"bold\",\n          fontSize: \"15px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, this.state.userAddress))), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }), __jsx(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }), __jsx(Grid, {\n        centered: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, __jsx(Grid.Column, {\n        width: \"8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        style: {\n          padding: \"20px\",\n          height: \"100%\",\n          borderRadius: \"50px\",\n          backgroundColor: COLORS.menuBackground,\n          color: COLORS.menuText,\n          border: \"2px solid\",\n          borderColor: COLORS.divBackground\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, __jsx(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, __jsx(\"h1\", {\n        style: {\n          fontSize: \"40px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, \"Total Posts\"), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }), __jsx(CountUp, {\n        style: {\n          fontSize: \"80px\",\n          alignContent: \"center\",\n          justifyContent: \"center\"\n        },\n        start: 0,\n        end: this.state.userPosts,\n        duration: 5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      })))), __jsx(Grid.Column, {\n        width: \"8\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        style: {\n          padding: \"20px\",\n          height: \"100%\",\n          borderRadius: \"50px\",\n          backgroundColor: COLORS.divBackground,\n          color: COLORS.menuBackground,\n          border: \"2px solid\",\n          borderColor: COLORS.menuBackground\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, __jsx(\"center\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, __jsx(\"h1\", {\n        style: {\n          fontSize: \"40px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, \"Total Tokens Earned\"), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }), __jsx(CountUp, {\n        style: {\n          fontSize: \"80px\",\n          alignContent: \"center\",\n          justifyContent: \"center\"\n        },\n        start: 0,\n        end: this.state.tokens,\n        duration: 5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }), __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, \"GTok\"))))), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }), __jsx(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }), __jsx(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, \"Your Posts\"), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }), __jsx(Card.Group, {\n        centered: true,\n        items: this.state.items,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      })));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(props) {\n      return _regeneratorRuntime.async(function getInitialProps$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", {\n                userAddress: props.query.address\n              });\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }]);\n\n  return ViewUser;\n}(Component);\n\nexport default ViewUser;","map":{"version":3,"sources":["/home/hrishib/Desktop/Ethegram/pages/users/view/index.js"],"names":["React","Component","Layout","social","Container","Grid","Card","Form","Input","Button","Modal","Header","List","COLORS","CountUp","ReactPlayer","ViewUser","userAddress","userName","tokens","userPosts","redeemTokens","items","posts","postCount","state","console","log","props","methods","getUserDetails","call","userDetails","setState","getPostsCount","Promise","all","Array","parseInt","fill","map","element","index","renderPosts","color","menuBackground","fontSize","backgroundColor","divBackground","padding","width","borderRadius","border","borderColor","fontWeight","height","menuText","alignContent","justifyContent","query","address"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SACEC,SADF,EAEEC,IAFF,EAGEC,IAHF,EAIEC,IAJF,EAKEC,KALF,EAMEC,MANF,EAOEC,KAPF,EAQEC,MARF,EASEC,IATF,QAUO,mBAVP;AAWA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,WAAP,MAAwB,cAAxB;;IAEMC,Q;;;;;;;;;;;;;;;;4DACI;AACNC,MAAAA,WAAW,EAAE,EADP;AAENC,MAAAA,QAAQ,EAAE,EAFJ;AAGNC,MAAAA,MAAM,EAAE,CAHF;AAINC,MAAAA,SAAS,EAAE,CAJL;AAKNC,MAAAA,YAAY,EAAE,CALR;AAMNC,MAAAA,KAAK,EAAE,EAND;AAONC,MAAAA,KAAK,EAAE,EAPD;AAQNC,MAAAA,SAAS,EAAE;AARL,K;;kEA4CM;AAAA;AAAA;AAAA;AAAA;AAAA;AACND,cAAAA,KADM,GACE,MAAKE,KAAL,CAAWF,KADb;AAEZG,cAAAA,OAAO,CAACC,GAAR,CAAY,MAAKF,KAAL,CAAWD,SAAvB,EAFY,CAIZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","sourcesContent":["import React, { Component } from \"react\";\nimport Layout from \"../../../components/Layout\";\nimport social from \"../../../ethereum/social\";\nimport {\n  Container,\n  Grid,\n  Card,\n  Form,\n  Input,\n  Button,\n  Modal,\n  Header,\n  List\n} from \"semantic-ui-react\";\nimport COLORS from \"../../../colors\";\nimport CountUp from \"react-countup\";\nimport ReactPlayer from \"react-player\";\n\nclass ViewUser extends Component {\n  state = {\n    userAddress: \"\",\n    userName: \"\",\n    tokens: 0,\n    userPosts: 0,\n    redeemTokens: 0,\n    items: [],\n    posts: [],\n    postCount: 0,\n  };\n\n  static async getInitialProps(props) {\n    return {\n      userAddress: props.query.address,\n    };\n  }\n\n  async componentDidMount() {\n    const userAddress = this.props.userAddress;\n\n    const userDetails = await social.methods.getUserDetails(userAddress).call();\n    console.log(userDetails);\n\n    this.setState({\n      userName: userDetails[0],\n      tokens: userDetails[1],\n      userPosts: userDetails[2],\n      redeemTokens: userDetails[3],\n      userAddress: userAddress,\n    });\n\n    const postCount = await social.methods.getPostsCount().call();\n    const posts = await Promise.all(\n      Array(parseInt(postCount))\n        .fill()\n        .map((element, index) => {\n          return social.methods.posts(index).call();\n        })\n    );\n    console.log(posts);\n    this.setState({ posts: posts, postCount: postCount });\n    this.renderPosts();\n  }\n\n  renderPosts = async () => {\n    const posts = this.state.posts;\n    console.log(this.state.postCount);\n\n    // const items = await Promise.all(\n    //   posts.map(async (post, index) => {\n    //     if (!post.valid || post.owner != this.state.userAddress) {\n    //       return {\n    //         key: index,\n    //       };\n    //     }\n    //     const name = this.state.userName;\n    //     let imgSrc = null, vidSrc = null;\n    //     if (post.imgIpfsHash.length > 0) {\n    //       let hash = post.imgIpfsHash;\n    //       let type = hash[0];\n    //       hash = hash.slice(1, hash.length);\n\n    //       if (type == \"0\") {\n    //         imgSrc = \"https://ipfs.io/ipfs/\" + hash;\n    //       } else {\n    //         vidSrc = \"https://ipfs.io/ipfs/\" + hash;\n    //       }\n    //     }\n\n    //     console.log(post.imgIpfsHash);\n\n    //     return {\n    //       key: index,\n    //       header: (\n    //         <div>\n    //           <h4 style={{ marginBottom: \"0px\" }}>{name}</h4>\n    //           <p style={{ color: \"grey\", marginTop: \"0px\" }}>\n    //             {post.timestamp}\n    //           </p>\n    //           <h3>{post.caption}</h3>\n    //         </div>\n    //       ),\n    //       description: (\n    //         <div style={{ border: \"2px solid grey\" }}>\n    //           <p style={{ margin: \"10px\", fontSize: \"15px\" }}>\n    //             {post.description}\n    //           </p>\n    //           <Image\n    //             style={{ padding: \"20px\" }}\n    //             hidden={imgSrc == null}\n    //             src={imgSrc}\n    //             fluid\n    //           />\n    //           <ReactPlayer\n    //             style={{ padding: \"20px\", minHeight: \"100%\" }}\n    //             hidden={vidSrc == null}\n    //             url={vidSrc}\n    //             controls={true}\n    //             light=\"https://www.thejobconnection.org/wp-content/uploads/2019/05/Video-Arrow-overlay.png\"\n    //             width=\"100%\"\n    //             height=\"100%\"\n    //           />\n    //         </div>\n    //       ),\n    //       extra: (\n    //         <div>\n    //           <Form onSubmit={() => this.onSubmit(index)}>\n    //             <Form.Field inline>\n    //               <Input\n    //                 required\n    //                 focus\n    //                 placeholder=\"Add a comment...\"\n    //                 value={this.state.caption}\n    //                 onChange={(event) =>\n    //                   this.setState({ newComment: event.target.value })\n    //                 }\n    //                 style={{ width: \"70%\", height: \"40px\", marginRight: \"0px\" }}\n    //               />\n    //               <Button\n    //                 size=\"small\"\n    //                 color=\"linkedin\"\n    //                 content=\"Post Comment\"\n    //                 icon=\"edit\"\n    //                 style={{ height: \"40px\" }}\n    //               />\n    //             </Form.Field>\n    //           </Form>\n    //           <br></br>\n    //           <Button\n    //             onClick={() => this.likePost(index)}\n    //             color=\"red\"\n    //             content=\"Like\"\n    //             icon=\"heart\"\n    //             size=\"medium\"\n    //             label={{ basic: true, color: \"red\", content: post.likes }}\n    //           />\n    //           <Modal\n    //             trigger={\n    //               <Button\n    //                 size=\"medium\"\n    //                 color=\"facebook\"\n    //                 content=\"View Comments\"\n    //                 icon=\"comments\"\n    //                 onClick={() => this.setState({ modal: true })}\n    //               />\n    //             }\n    //             size=\"small\"\n    //           >\n    //             <Header content=\"Comments\" />\n    //             <Modal.Content>\n    //               <List divided items={post.comments.split(\"/\")}></List>\n    //             </Modal.Content>\n    //             <Modal.Actions>\n    //               <Button\n    //                 color=\"red\"\n    //                 content=\"Close\"\n    //                 icon=\"close\"\n    //                 inverted\n    //                 onClick={() => this.setState({ modal: false })}\n    //               />\n    //             </Modal.Actions>\n    //           </Modal>\n    //         </div>\n    //       ),\n    //       fluid: true,\n    //     };\n    //   })\n    // );\n\n    // this.setState({ items: items });\n  };\n\n  render() {\n    return (\n      <Layout>\n        <Container>\n          <br></br>\n          <center>\n            <h1 style={{ color: COLORS.menuBackground, fontSize: \"50px\" }}>\n              {this.state.userName}\n            </h1>\n            <div\n              style={{\n                backgroundColor: COLORS.divBackground,\n                padding: \"10px\",\n                width: \"500px\",\n                borderRadius: \"20px\",\n                border: \"1px solid\",\n                borderColor: COLORS.menuBackground,\n              }}\n            >\n              <p\n                style={{\n                  color: COLORS.menuBackground,\n                  fontWeight: \"bold\",\n                  fontSize: \"15px\",\n                }}\n              >\n                {this.state.userAddress}\n              </p>\n            </div>\n          </center>\n          <br />\n          <br />\n          <hr />\n          <br />\n          <br />\n          <Grid centered>\n            <Grid.Column width=\"8\">\n              <div\n                style={{\n                  padding: \"20px\",\n                  height: \"100%\",\n                  borderRadius: \"50px\",\n                  backgroundColor: COLORS.menuBackground,\n                  color: COLORS.menuText,\n                  border: \"2px solid\",\n                  borderColor: COLORS.divBackground,\n                }}\n              >\n                <center>\n                  <h1 style={{ fontSize: \"40px\" }}>Total Posts</h1>\n                  <br />\n                  <br />\n                  <CountUp\n                    style={{\n                      fontSize: \"80px\",\n                      alignContent: \"center\",\n                      justifyContent: \"center\",\n                    }}\n                    start={0}\n                    end={this.state.userPosts}\n                    duration={5}\n                  />\n                </center>\n              </div>\n            </Grid.Column>\n            <Grid.Column width=\"8\">\n              <div\n                style={{\n                  padding: \"20px\",\n                  height: \"100%\",\n                  borderRadius: \"50px\",\n                  backgroundColor: COLORS.divBackground,\n                  color: COLORS.menuBackground,\n                  border: \"2px solid\",\n                  borderColor: COLORS.menuBackground,\n                }}\n              >\n                <center>\n                  <h1 style={{ fontSize: \"40px\" }}>Total Tokens Earned</h1>\n                  <br />\n                  <br />\n                  <CountUp\n                    style={{\n                      fontSize: \"80px\",\n                      alignContent: \"center\",\n                      justifyContent: \"center\",\n                    }}\n                    start={0}\n                    end={this.state.tokens}\n                    duration={5}\n                  />\n                  <h1>GTok</h1>\n                </center>\n              </div>\n            </Grid.Column>\n          </Grid>\n          <br />\n          <br />\n          <hr />\n          <h1>Your Posts</h1>\n          <br />\n          <Card.Group centered items={this.state.items} />\n        </Container>\n      </Layout>\n    );\n  }\n}\n\nexport default ViewUser;\n"]},"metadata":{},"sourceType":"module"}
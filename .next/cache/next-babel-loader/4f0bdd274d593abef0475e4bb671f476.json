{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport Layout from \"../../components/Layout\";\nimport { Form, Button, List, Container } from \"semantic-ui-react\";\nimport ipfs from \"../../ethereum/ipfs\";\nimport social from \"../../ethereum/social\";\nimport web3 from \"../../ethereum/web3\";\nimport { Router } from \"../../routes\";\nimport COLORS from \"../../colors\";\n\nclass ChatRoom extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      caption: \"\",\n      prevMsgs: \"\",\n      messages: [],\n      currmsg: \"\",\n      currAcc: \"\",\n      username: \"\",\n      items: [],\n      loading: false\n    });\n\n    _defineProperty(this, \"renderMsgs\", () => {\n      const items = this.state.messages.map((msg, index) => {\n        let str = msg.split(\" *** \");\n        return {\n          key: index,\n          description: __jsx(\"div\", {\n            style: {\n              width: \"fit-content\",\n              border: \"1px solid\",\n              borderColor: COLORS.menuBackground,\n              margin: \"5px\",\n              padding: \"10px\",\n              paddingRight: \"50px\",\n              borderRadius: \"10px\",\n              color: COLORS.menuBackground\n            }\n          }, __jsx(\"b\", null, str[0]), __jsx(\"p\", null, str[1])),\n          backgroundColor: COLORS.ddbackground\n        };\n      });\n      return items;\n    });\n\n    _defineProperty(this, \"onSend\", async () => {\n      this.setState({\n        loading: true\n      });\n      let prevMsgs = this.state.prevMsgs;\n\n      if (prevMsgs.length > 0) {\n        prevMsgs += \" /// \" + this.state.username + \" *** \" + this.state.currmsg;\n      } else {\n        prevMsgs += this.state.username + \" *** \" + this.state.currmsg;\n      }\n\n      this.setState({\n        prevMsgs: prevMsgs,\n        currmsg: \"\"\n      }); // let uint8Arr = new TextEncoder(\"utf-8\").encode(prevMsgs);\n\n      let uint8Arr = await Buffer.from(prevMsgs);\n      console.log(uint8Arr);\n      const ipfshash = await ipfs.add(uint8Arr);\n      console.log(ipfshash);\n      await social.methods.setChatHash(ipfshash[0].hash).send({\n        from: this.state.currAcc\n      });\n      this.componentDidMount();\n      this.setState({\n        loading: false\n      });\n    });\n  }\n\n  async componentDidMount() {\n    const accs = await web3.eth.getAccounts();\n    const username = await social.methods.getUserDetails(accs[0]).call();\n    this.setState({\n      currAcc: accs[0],\n      username: username[0]\n    });\n    const hash = await social.methods.chatHash().call();\n\n    if (hash.length > 0) {\n      let data = await ipfs.files.get(hash);\n      console.log(data[0].content);\n      let msgString = new TextDecoder(\"utf-8\").decode(data[0].content);\n      console.log(msgString);\n      this.setState({\n        messages: msgString.split(\"///\"),\n        prevMsgs: msgString\n      });\n    }\n\n    const items = this.renderMsgs();\n    this.setState({\n      items: items\n    });\n  }\n\n  render() {\n    return __jsx(Layout, null, __jsx(Container, null, __jsx(\"h3\", null, \"Chat Room\"), __jsx(\"hr\", null), __jsx(List, {\n      items: this.state.items\n    }), __jsx(Form, {\n      onSubmit: () => this.onSend()\n    }, __jsx(Form.Input, {\n      fluid: true,\n      placeholder: \"Write your message...\",\n      value: this.state.currmsg,\n      onChange: event => this.setState({\n        currmsg: event.target.value\n      })\n    }), __jsx(Button, {\n      icon: \"send\",\n      style: {\n        backgroundColor: COLORS.menuBackground,\n        color: COLORS.menuText\n      },\n      content: \"Send\",\n      loading: this.state.loading\n    }))));\n  }\n\n}\n\nexport default ChatRoom;","map":null,"metadata":{},"sourceType":"module"}
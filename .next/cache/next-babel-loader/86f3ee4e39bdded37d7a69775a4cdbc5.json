{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Form, Input, Button } from 'semantic-ui-react';\nimport web3 from '../ethereum/web3';\nimport ipfs from '../ethereum/ipfs';\nimport social from '../ethereum/social';\nimport Layout from '../components/Layout';\n\nconst textEncoding = require('text-encoding');\n\nclass TestIpfs extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      ipfsHash: null,\n      buffer: '',\n      ethAddress: '',\n      data: null,\n      pic: ''\n    });\n\n    _defineProperty(this, \"captureFile\", event => {\n      event.stopPropagation();\n      event.preventDefault();\n      const file = event.target.files[0];\n      let reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => this.convertToBuffer(reader);\n    });\n\n    _defineProperty(this, \"convertToBuffer\", async reader => {\n      const buffer = await Buffer.from(reader.result);\n      this.setState({\n        buffer: buffer\n      });\n    });\n\n    _defineProperty(this, \"onSubmit\", async event => {\n      event.preventDefault();\n      const accs = await web3.eth.getAccounts();\n      console.log('Sending from metamask account: ' + accs[0]); // obtain contract address from social.js\n\n      const ethAddress = await social.options.address;\n      this.setState({\n        ethAddress: ethAddress\n      });\n      const ipfsHash = await ipfs.add(this.state.buffer);\n      this.setState({\n        ipfsHash: ipfsHash[0].hash\n      });\n      console.log(this.state.ipfsHash); //save doc to ipfs, return its hash\n      // await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n      //     console.log(err, ipfsHash);\n      //     this.setState({ ipfsHash: ipfsHash[0].hash });\n      // });\n    });\n\n    _defineProperty(this, \"getFile\", async event => {\n      event.preventDefault();\n      const data = await ipfs.files.get(this.state.ipfsHash);\n      const content = data[0].content; // this.largeuint8ArrToString(content, (text) => {\n      //     console.log(text);\n      //     this.setState({ pic: \"data:image/png;base64\" + text });\n      // });\n\n      const pic = this.uint8ToBase64(content); // const TextDecoder = textEncoding.TextDecoder;\n      // let pic = new TextDecoder(\"utf-8\").decode(content);\n\n      this.setState({\n        data: data,\n        pic: \"data:image/png;base64,\" + pic\n      });\n      console.log(\"Retrieved Data: \", this.state.pic);\n    });\n  }\n\n  largeuint8ArrToString(uint8arr, callback) {\n    var bb = new Blob([uint8arr]);\n    var f = new FileReader();\n\n    f.onload = function (e) {\n      callback(e.target.result);\n    };\n\n    f.readAsText(bb);\n  }\n\n  uint8ToBase64(buffer) {\n    var binary = '';\n    var bytes = [].slice.call(new Uint8Array(buffer));\n    bytes.forEach(b => binary += String.fromCharCode(b));\n    return window.btoa(binary);\n  }\n\n  render() {\n    return __jsx(Layout, null, __jsx(\"h2\", null, \"Test IPFS\"), __jsx(Form, {\n      onSubmit: this.onSubmit\n    }, __jsx(Input, {\n      type: \"file\",\n      onChange: this.captureFile\n    }), __jsx(Button, {\n      primary: true\n    }, \"Send\")), __jsx(\"br\", null), __jsx(Button, {\n      onClick: this.getFile,\n      secondary: true\n    }, \"GetFile\"), __jsx(\"img\", {\n      src: this.state.pic\n    }));\n  }\n\n}\n\nexport default TestIpfs;","map":null,"metadata":{},"sourceType":"module"}